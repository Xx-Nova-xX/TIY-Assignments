/* === PRODUCTION CODE === 
/*Problem 2
   * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
   * By starting with 1 and 2, the first 10 terms will be:
   * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

   * By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
   * find the sum of the even-valued terms.*/


function solution(){
    return {
       solveFor: function(limit){
           return this.sum(this.filterEvens(this.fibonacci(limit)));
       },
       fibonacci: function(limit){
         var prev = 1, curr = 2, temp;
         var sequence = [ 1, 2 ];
         
         if( limit < 3 ){
             return [];
         }
        while( prev + curr < limit) {
            temp = prev + curr;
            prev = curr;
            curr = temp;
            
            sequence.push(temp);
        }
        return sequence;
       },
           
       
       filterEvens: function(list){
           
           return list.filter (function(item){
               if(item % 2 === 0) return item;
           });
           
       },
       sum: function(list){
           var sumEvens = list.reduce(function(a,b) {
               return a + b;
           });
           return sumEvens;
        } //END sum
    }
}


    assert = require('chai').assert;
    
    
    describe('sum', function(){
        it('should return a function', function() {
            assert.isFunction(solution().sum, 'function');   
        });
        it('should sum an array of numbers', function(){
           assert.strictEqual(solution().sum([1,2,3]), 6);
        });
    });  
       
     describe('filterEvens', function(){
        it('should be a function', function(){
            assert.isFunction(solution().filterEvens, 'function');       
        });
        it('should return an array of evens', function(){
           assert.deepEqual(solution().filterEvens([1,2,4,5,6]),[2,4,6]);
            
        });
     });

    describe('fibonacci', function() {
        it('should be a function', function(){
        assert.isFunction(solution().fibonacci, 'function');    
        });
        it('should return an array of fibonacci numbers', function(){
           assert.deepEqual(solution().fibonacci(5), [1,2,3]); 
        });
    });
    
    describe('solveFor', function() {
       it('should be a function', function() {
           assert.isFunction(solution().solveFor, 'function');
           });
       it('should be able to solve a simple example', function(){
          assert.equal(solution().solveFor(13), 10);
       });
       
       
    });

   