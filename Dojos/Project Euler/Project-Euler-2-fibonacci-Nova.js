/* === PRODUCTION CODE === 
/*Problem 2
   * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
   * By starting with 1 and 2, the first 10 terms will be:
   * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

   * By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
   * find the sum of the even-valued terms.*/



var fibonacci = [ 1, 2, 3, 5, 8, 13, 21, 34, 55, 89];

function filterEvens(arrElement){
    if(arrElement % 2 === 0) return arrElement;
}





    assert = require('chai').assert;
    describe('filterEvens()', function(){
        it('should return an function', function() {
        assert.typeOf(filterEvens, 'function');   
    
        });
        it( 'should return even numbers', function() {
        assert.equal(filterEvens(2), 2);
        });
    });







/*
it('', fucntion() {
});
*/






/*
valuesUnder4mil = 4,000,000,000;

function solution(){
   for(limit = 0, limit < valuesUnder4mil; limit++){
       
   }
    return {
        // I wanna see this one...
        solveFor: function(limit){ /* perform magic...  },

        // For Problem 2, for example... However you solve it.
       fibonacci: function(limit){ /* . . . */
 //       filterEvens: function(list){ /* . . . */ },
 //       sum: function(list){ /* . . . */ }
//    }
//}

/* === TEST CODE === */
// You should probably write some...

